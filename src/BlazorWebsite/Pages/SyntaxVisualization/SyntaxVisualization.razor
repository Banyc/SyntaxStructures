@page "/"
@using System.Net.Http.Json
@inject IHttpClientFactory ClientFactory
@using BlazorWebsite.Models.SyntaxVisualization

@* StartGroupingSubtreesOnFile *@
<Row>
    <Col>
        <Input Placeholder="File path" @bind-Value="StartGroupingSubtreesOnFileRequestDto.FilePath" />
    </Col>
    <br/>
    <Col>
        <Button OnClick="@btnStartGroupingSubtreesOnFile_OnClick" Loading="IsLoading_btnStartGroupingSubtreesOnFile">Change File</Button>
    </Col>
</Row>
<br/>

@* group preview *@
<Table DataSource="@GetGraphOfFirstTreeOfEachFreqencyGroupResponseDto.Groups"
       Total="@GetGraphOfFirstTreeOfEachFreqencyGroupResponseDto.NumGroups"
       PageIndex="@GroupPreviewPageConfig.PageIndex"
       @bind-PageSize="@GroupPreviewPageConfig.PageSize"
       OnPageIndexChange="@tableGroupPreview_OnPageIndexChange">
    <Column @bind-Field="@context.GroupIndex" />
    @* <Column @bind-Field="@context.Diagraph" /> *@
    <Column @bind-Field="@context.Diagraph">
        <img src='https://g.gravizo.com/svg?@context.Diagraph'/>
    </Column>
    <Column @bind-Field="@context.Count" />
    <ActionColumn Title="Acton">
        <Space>
            <SpaceItem>
                <Button OnClick="@(() => UpdateTableSentencesInAGroup(context.GroupIndex))">Details</Button>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

@* sentences in a group *@
<Table DataSource="@GetGraphOfTreesInAGroupResponseDto.Sentences"
       Total="@GetGraphOfTreesInAGroupResponseDto.NumOffsets"
       PageIndex="@SentencesInAGroupPageConfig.PageIndex"
       @bind-PageSize="@SentencesInAGroupPageConfig.PageSize"
       OnPageIndexChange="@tableSentencesInAGroup_OnPageIndexChange">
    <Column @bind-Field="@context.OffsetIndex" />
    <Column @bind-Field="@context.Digraph">
        <img src='https://g.gravizo.com/svg?@context.Digraph'/>
    </Column>
    <Column @bind-Field="@context.FullText" />
</Table>


@code
{
    private HttpClient Backend { get; set; }

    private bool IsLoading_btnStartGroupingSubtreesOnFile { get; set; } = false;

    private StartGroupingSubtreesOnFileRequestDto StartGroupingSubtreesOnFileRequestDto { get; set; } = new();
    private GetGraphOfFirstTreeOfEachFreqencyGroupRequestDto GetGraphOfFirstTreeOfEachFreqencyGroupRequestDto { get; set; } = new();
    private GetGraphOfFirstTreeOfEachFreqencyGroupResponseDto GetGraphOfFirstTreeOfEachFreqencyGroupResponseDto { get; set; } = new();
    private GetGraphOfTreesInAGroupRequestDto GetGraphOfTreesInAGroupRequestDto { get; set; } = new();
    private GetGraphOfTreesInAGroupResponseDto GetGraphOfTreesInAGroupResponseDto { get; set; } = new();

    private int SelectedGroupIndex { get; set; }


    private PageConfig GroupPreviewPageConfig { get; set; } = new() { PageSize = 5 };
    private PageConfig SentencesInAGroupPageConfig { get; set; } = new() { PageSize = 5 };


    protected override async Task OnInitializedAsync()
    {
        this.Backend = this.ClientFactory.CreateClient("server");
        await UpdateTableGroupPreview();
    }

    private async Task btnStartGroupingSubtreesOnFile_OnClick()
    {
        IsLoading_btnStartGroupingSubtreesOnFile = true;
        var res = await this.Backend.PostAsJsonAsync("/StartGroupingSubtreesOnFile", this.StartGroupingSubtreesOnFileRequestDto);
        
        IsLoading_btnStartGroupingSubtreesOnFile = false;
    }

    private async Task tableGroupPreview_OnPageIndexChange(PaginationEventArgs args)
    {
        this.GroupPreviewPageConfig.PageIndex = args.Page;
        await UpdateTableGroupPreview();
    }

    private async Task UpdateTableGroupPreview()
    {
        var range = this.GroupPreviewPageConfig.GetRange();
        GetGraphOfFirstTreeOfEachFreqencyGroupRequestDto request = new()
        {
            FromGroupIndex = range.Item1,
            ToGroupIndex = range.Item2,
        };

        var res = await this.Backend.PostAsJsonAsync("/GetGraphOfFirstTreeOfEachFreqencyGroup", request);
        var body = await res.Content.ReadFromJsonAsync<GetGraphOfFirstTreeOfEachFreqencyGroupResponseDto>();
        this.GetGraphOfFirstTreeOfEachFreqencyGroupResponseDto = body;
    }

    private async Task tableSentencesInAGroup_OnPageIndexChange(PaginationEventArgs args)
    {
        this.SentencesInAGroupPageConfig.PageIndex = args.Page;
        await UpdateTableSentencesInAGroup();
    }

    private async Task UpdateTableSentencesInAGroup(int groupIndex = -1)
    {
        if (groupIndex > -1)
        {
            this.SelectedGroupIndex = groupIndex;
        }
        var range = this.SentencesInAGroupPageConfig.GetRange();
        GetGraphOfTreesInAGroupRequestDto request = new()
        {
            FromOffsetIndex = range.Item1,
            ToOffsetIndex = range.Item2,
            GroupIndex = this.SelectedGroupIndex,
        };

        var res = await this.Backend.PostAsJsonAsync("/GetGraphOfTreesInAGroup", request);
        var body = await res.Content.ReadFromJsonAsync<GetGraphOfTreesInAGroupResponseDto>();
        this.GetGraphOfTreesInAGroupResponseDto = body;
    }
}
